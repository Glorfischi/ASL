# -*- mode: ruby -*-
# vi: set ft=ruby :
#
$instances = 3
$memory = 2048
$cpus = 2
$pubkey = "id_rsa.pub"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/buster64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.synced_folder ".", "/vagrant", disabled: true


  config.vm.provider :virtualbox do |vb|
    vb.memory = 2048
  end

  config.vm.provider :libvirt do |libvirt|
    libvirt.memory = $memory
    libvirt.cpus = $cpus
  end

  (1..$instances).each do |i|
    config.vm.define vm_name = "fadalax-%02d" % i do |debian|
      debian.vm.hostname = vm_name

      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      debian.vm.network "private_network", ip: "172.17.5.#{i+100}"
      #Add a link to the host computer's network to test printers (only makes sense when connected to the oVIS LAN)
      #NOTE: This is not needed to test printers, and if it is enabled, it will (probably) cause that the scanner does notwork!
      #debian.vm.network "public_network", use_dhcp_assigned_default_route: true

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # config.vm.network "forwarded_port", guest: 80, host: 8080

      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.
      # config.vm.network "public_network"
      #
    end
  end

  # add ssh key to authorized_keys
  # config.ssh.insert_key = true
  # add user ssh key to authorized_keys
  config.vm.provision "file", source: "~/.ssh/"+$pubkey, destination: "/tmp/id_rsa.pub"
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  config.vm.provision :shell, :inline => "cat /tmp/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys; chown -R vagrant:vagrant /home/vagrant/.ssh/"
  config.vm.provision :shell, :inline => "apt-get update; apt-get install -y python"
end
